# 확장 (OCP)

다음은 클라이언트마다 요구하는 방식이 다를만한 요소들을 확장성있게 변경하는 작업을 해야 한다.  
1장에서는 3가지 방법을 다룬다. **[상속/인터페이스]**.  

## 1. 상속을 통한 분리 (InheritanceUserDao.class 참고)
```
public abstract class InheritanceUserDao {
    public void add(User user) throws ClassNotFoundException, SQLException{
        Connection c = getConnection();

        PreparedStatement ps = c.prepareStatement(
                "insert into user(id, name, password) value(?, ?, ?)");
        ps.setLong(1, user.getId());
        ps.setString(2, user.getName());
        ps.setString(3, user.getPassword());

        ps.executeUpdate();

        ps.close();
        c.close();
    }
    //클라이언트의 요구에 따라 구현할 메소드
    public abstract Connection getConnection() throws ClassNotFoundException, SQLException;
}

class AUserDao extends InheritanceUserDao {
    public Connection getConnection() throws ClassNotFoundException, SQLException {
        Class.forName("com.mysql.cj.jdbc.Driver");
        System.out.println("A클라이언트가 원하는 형식의 커넥션 생성");
        return DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/tobispring", "root", "1234");
    }
}

class BUserDao extends InheritanceUserDao {
    public Connection getConnection() throws ClassNotFoundException, SQLException {
        Class.forName("com.mysql.cj.jdbc.Driver");
        System.out.println("B클라이언트가 원하는 형식의 커넥션 생성");
        return DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/tobispring", "root", "1234");
    }
}
```

* 기본적인 로직의 흐름을 구축하고 클라이언트의 요구에따라 필요 메소드들을 추상화하여 서브클래스에서 구현하는  
__템플릿 메소드 패턴__ 을 주로 사용해 매우 간단한 방법.
* 문제점
  * 다른 목적을 위해 상속을 하고 있다면 불가능함 (자바는 다중상속을 허용하지 않는다.)
  * 슈퍼클래스 내부의 변경이 있으면 모든 서브클래스들을 변경해야 하는 문제점이 있다.
  * 상속을 통해 만들어진 구현 코드를 다른 클래스에서 적용이 불가능해 매번 코드가 중복된다.
  
다음은 InheritanceUserDao.class 테스트 코드이다.
```
@Transactional
public class InheritanceUserDaoTest {
    InheritanceUserDao daoA = new AUserDao();
    InheritanceUserDao daoB = new BUserDao();

    @Test
    @DisplayName("상속을 통한 확장 테스트1")
    void A클라이언트() throws SQLException, ClassNotFoundException {
        //given
        User user1 = new User(1L, "테스트1", "password1");

        //when
        daoA.add(user1);
        User newUser = daoA.get(user1.getId());

        //then
        Assertions.assertThat(user1).isEqualTo(newUser);
        System.out.println(user1.getName() + " 등록 성공!");
    }

    @Test
    @DisplayName("상속을 통한 확장 테스트1")
    void B클라이언트() throws SQLException, ClassNotFoundException {
        //given
        User user1 = new User(2L, "테스트2", "password2");

        //when
        daoB.add(user1);
        User newUser = daoB.get(user1.getId());

        //then
        Assertions.assertThat(user1).isEqualTo(newUser);
        System.out.println(user1.getName() + " 등록 성공!");
    }
}
```

## 2.인터페이스를 이용한 분리 (InterfaceUserDao.class 참고)
먼저 우리가 알고있는 인터페이스를 이용하여 ConnectionMaker을 구현하자.
* ConnectionMaker.interface 
```
public interface ConnectionMaker {
    public Connection getConnection() throws ClassNotFoundException, SQLException;
}
```  
* AConnectionMaker.class (ConnectionMaker 구현클래스)
```
public class AConnectionMaker implements ConnectionMaker {
    @Override
    public Connection getConnection() throws ClassNotFoundException, SQLException {
        Class.forName("com.mysql.cj.jdbc.Driver");
        System.out.println("A클라이언트용 커넥션 todtjd");
        return DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/tobispring", "root", "1234");
    }
}

```
* InterfaceUserDao.class
```
public class InterfaceUserDao{

        ConnectionMaker aConnectionMaker;

        // 구현 클래스를 App에서 알고있어야 실행이 가능함. => 종속적이다. (OCP위반)
        public InterfaceUserDao(){
            aConnectionMaker = new AConnectionMaker();
        }

        public void add(User user) throws ClassNotFoundException, SQLException {
            Connection c = aConnectionMaker.getConnection();

            PreparedStatement ps = c.prepareStatement(
                    "insert into user(id, name, password) value(?, ?, ?)");
            ps.setLong(1, user.getId());
            ps.setString(2, user.getName());
            ps.setString(3, user.getPassword());

            ps.executeUpdate();

            ps.close();
            c.close();
        }

        public User get(Long id) throws ClassNotFoundException, SQLException{
            Connection c = aConnectionMaker.getConnection();

            PreparedStatement ps = c.prepareStatement(
                    "select * from user where id = ?");
            ps.setLong(1, id);

            ResultSet rs = ps.executeQuery();
            rs.next();
            User user = new User();
            user.setId(rs.getLong("Id"));
            user.setName(rs.getString("name"));
            user.setPassword(rs.getString("password"));

            rs.close();
            ps.close();
            c.close();

            return user;
        }
}
```
조금 발전한것 같지만 한가지 결정적인 문제점이 있다.   
만약 클라이언트가 AConnectionMaker 방식이 아닌 BConnectionMaker라는 새로운 방식으로 변경하고자 한다.  
여기서 BConnectionMaker 방식으로 변경할때 모든 코드를 수정해야하는 문제가 생긴다. 이는 명백한 OCP 위반이다.  
쉽게 말하자면 InterfaceUserDao가 AConnectionMaker라는 특정 클래스에 종속되어 **자유로운(코드의 변경이 없는) 확장**이 어렵게 된다.  
```
// UserDao의 각 메소드에서는 AConnectionMaker라는 구현클래스를 정확하게 알고 있어야 한다.
AConnectionMaker aConnection = new AConnectionMaker();
Connection c = aConnection.getConnection();
```

우리의 목적은 Application(InterfaceUserDao)이 자신도 모르게 다른 구현 클래스를 사용하게 만드는 것이다. (독립성을 부여)  
여기서 필요한 것이 **제어의 역전**이다.