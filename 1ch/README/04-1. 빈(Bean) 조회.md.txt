# 빈 조회
번외로 빈을 조회하는 방법들을 알아보고자 한다.

## 1. 스프링 컨테이너에 존재하는 빈 조회

```
public class ApplicationContextInfoTest {

    AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext(AppConfig.class);

    @Test
    @DisplayName("모든 빈 출력")
    void findAllBean() {
        String[] beanDefinitionNames = ac.getBeanDefinitionNames();
        for (String beanDefinitionName : beanDefinitionNames) {
            Object bean = ac.getBean(beanDefinitionName);
            System.out.println("beanDefinitionName = " + beanDefinitionName + " object = " + bean);
        }
    }

    @Test
    @DisplayName("애플리케이션 빈 출력하기")
    void findApplicationBean() {
        String[] beanDefinitionNames = ac.getBeanDefinitionNames();
        for (String beanDefinitionName : beanDefinitionNames) {
            BeanDefinition beanDefinition = ac.getBeanDefinition(beanDefinitionName);
            //Role ROLE_APPLICATION: 직접 등록한 애플리케이션 빈
            //Role ROLE_INFRASTRUCTURE: 스프링이 내부에서 사용하는 빈
            if (beanDefinition.getRole() == BeanDefinition.ROLE_APPLICATION) {
                Object bean = ac.getBean(beanDefinitionName);
                System.out.println("name=" + beanDefinitionName + " object=" + bean);
            }
        }
    }
}
```

* 기본적으로 `getBeanDefinitionNames()` 메소드를 사용하면 스프링에 등록된 모든 빈 정보를 조회한다.
    * 만약 스프링 내부에서 사용하는 빈을 제외하고 내가 등록한 빈만 보고 싶다면 `getRole()` 메소드를 통해 `필터링` 할 수 있다.
        * `Role_APPLICATION` : 사용자가 정의한 빈.
        * `ROLE_INFRASTRUCTURE` : 스프링 내부에서 사용하는 빈.

***
## 2. 기본적인 스프링 빈 조회
```
public class ApplicationContextBasicFindTest {

    AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext(AppConfig.class);

    @Test
    @DisplayName("빈 이름으로 조회")
    void findBeanByName() {
        UserDao userDao = ac.getBean("userDao", UserDao.class);
        assertThat(userDao).isInstanceOf(InterfaceUserDao.class);
    }

    @Test
    @DisplayName("타입만으로 조회")
    void findBeanByType() {
        UserDao userDao = ac.getBean(UserDao.class);
        assertThat(userDao).isInstanceOf(InterfaceUserDao.class);
    }

    @Test
    @DisplayName("구체 타입으로 조회")
    void findBeanByImplType() {
        InterfaceUserDao userDao = ac.getBean("userDao", InterfaceUserDao.class);
        assertThat(userDao).isInstanceOf(InterfaceUserDao.class);
    }

    @Test
    @DisplayName("조회 대상이 없는경우")
    void findBeanByNameX() {
        assertThrows(NoSuchBeanDefinitionException.class, () -> ac.getBean("xxxxx", UserDao.class));
    }
}
```
1. Bean 이름으로 검색 : Bean을 등록하면 이름의 디폴트값은 메소드명이라고 했다. `(name = "")으로 지정 가능.`  
  `getBean("Bean이름", 타입)` 으로 검색이 가능하다.
  
2. Bean 타입으로 검색 : Bean이름 없이 Type만으로도 검색이 가능하다 `(단 그 타입의 빈이 1개일 경우)`  
  `getBean(타입)`
  
3. 조회 대상이 없으면 `NoSuchBeanDefinitionException`을 리턴한다.
 


***
## 3. 스프링 빈 조회 (중복예외)

중복되는 케이스를 만들기 위해서 설정정보를 따로 입력한다.
```public class ApplicationContextSameBeanFindTest {

    //중복 테스트를 위한 설정정보
    @Configuration
    static class TestConfig {
        @Bean
        public ConnectionMaker connectionMaker1() {
            return new AConnectionMaker();
        }

        @Bean
        public ConnectionMaker connectionMaker2() {
            return new AConnectionMaker();
        }
    }

    AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext(TestConfig.class);

    @Test
    @DisplayName("1. 타입으로 조회 시 같은 타입이 둘 이상 있으면, 중복오류 발생.")
    void findBeanByTypeDuplicate() {
        Assertions.assertThrows(NoUniqueBeanDefinitionException.class,
                () -> ac.getBean(ConnectionMaker.class));
    }

    @Test
    @DisplayName("2. 1번 오류 시, 빈 이름을 지정하자.")
    void findBeanByName() {
        ConnectionMaker connectionMaker = ac.getBean("connectionMaker1", ConnectionMaker.class);
        assertThat(connectionMaker).isInstanceOf(ConnectionMaker.class);
    }

    @Test
    @DisplayName("특정 타입을 모두 조회하기")
    void findAllBeanByType() {
        Map<String, ConnectionMaker> beansOfType = ac.getBeansOfType(ConnectionMaker.class);
        for (String key : beansOfType.keySet()) {
            System.out.println("key = " + key + "/ value = " + beansOfType.get(key));
        }
        System.out.println("beansOfType = " + beansOfType);
        Assertions.assertThat(beansOfType.size()).isEqualTo(2);
    }
}
```
* 타입으로 조회시 같은 타입의 스프링 빈이 둘 이상이면 오류가 발생한다. 이때는 빈 이름을 지정하자.  
  `getBeansOfType()` 을 사용하면 해당 타입의 모든 빈을 조회할 수 있다.

***
## 4. 스프링 빈 조회 (상속관계)

기본적으로 부모타입으로 조회하면, 자식타입도 함께 조회가 된다.  
=> 모든 자바 객체의 최고 부모인 `Object`타입으로 조회하면, 모든 스프링 빈을 조회한다.
```
public class ApplicationContextExtendsFindTest {

    @Configuration
    static class TestConfig {
        @Bean
        public ConnectionMaker aConnectionMaker() {
            return new AConnectionMaker();
        }

        @Bean
        public ConnectionMaker bConnectionMaker() {
            return new BConnectionMaker();
        }
    }

    AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext(TestConfig.class);

    @Test
    @DisplayName("1. 부모 타입으로 조회시, 자식이 둘 이상 있으면, 중복오류 발생")
    void findBeanByParentTypeDuplicate() {
        Assertions.assertThrows(NoUniqueBeanDefinitionException.class,
                () -> ac.getBean(ConnectionMaker.class));
    }

    @Test
    @DisplayName("2. 1의 경우 타입과 같은 경우로 Bean의 이름을 지정하면 된다.")
    void findBeanByParentTypeBeanName() {
        ConnectionMaker aBean = ac.getBean("aConnectionMaker", ConnectionMaker.class);
        ConnectionMaker bBean = ac.getBean("bConnectionMaker", ConnectionMaker.class);
        assertThat(aBean).isInstanceOf(AConnectionMaker.class);
        assertThat(bBean).isInstanceOf(BConnectionMaker.class);
    }

    //별로 추천하는 방법은 아님.
    @Test
    @DisplayName("특정 하위타입으로 조회")
    void findBeanBySubType() {
        AConnectionMaker aBean = ac.getBean(AConnectionMaker.class);
        assertThat(aBean).isInstanceOf(AConnectionMaker.class);
    }

    @Test
    @DisplayName("부모 타입으로 모두 조회하기")
    void findBeanByParentType() {
        Map<String, ConnectionMaker> beansOfType = ac.getBeansOfType(ConnectionMaker.class);
        for (String key : beansOfType.keySet()) {
            System.out.println("key = " + key + " / value = " + beansOfType.get(key));
        }
    }

    @Test
    @DisplayName("부모 타입으로 모두 조회 (Object ver.)")
    void findAllBeanByObjectType() {
        Map<String, Object> beansOfType = ac.getBeansOfType(Object.class);
        for (String key : beansOfType.keySet()) {
            System.out.println("key = " + key + " / value = " + beansOfType.get(key));
        }
    }
}
```

출처
* 토비의 스프링3.1 (이일민)  
* [스프링 핵심 원리 <기본편> (김영한)](https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC-%EA%B8%B0%EB%B3%B8%ED%8E%B8/dashboard)